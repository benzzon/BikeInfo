@page "/"
@using BikeApp.Services
@using BikeInfo.Models
@using System.Diagnostics
@using Microsoft.JSInterop
@inject BikeService BikeService
@inject ILogger<Index> Logger
@inject IToastService ToastService
@inject NavigationManager NavManager
@inject IJSRuntime JavaScript

<PageTitle>Home</PageTitle>

<h1>Bike-info</h1>

<!-- Wrap FluentTextField in a container, but not needed when using the "Autofocus-attribute" of the FluentTextField -->
<div @ref="inputContainer">
    <FluentTextField @bind-Value="manufacturerFilter"
                     placeholder="Enter Manufacturer"
                     @onkeydown="HandleEnterKeyPress"
                     @oninput="HandleInputChange" Autofocus />
</div>

<FluentButton @onclick="LoadBikes">Search</FluentButton>

<FluentButton @onclick="ShowInfo">Show toast-info</FluentButton>

@if (bikes == null && !justStarted)
{
    <p>Loading...</p>
}
else if (bikes != null && !bikes.Any())
{
    <p>No bikes found.</p>
}
else
{
    <FluentDataGrid TGridItem="Bike" Items="@bikes">
        <PropertyColumn Title="Title" Property="@(p => p.Title)" />
        <PropertyColumn Title="Model" Property="@(p => p.Model)" />
        <PropertyColumn Title="Top&nbsp;Speed" Property="@(p => p.TopSpeed)" />
    </FluentDataGrid>
}

@code {
    //private List<Bike>? motorcycles;
    private bool justStarted = true;
    private IQueryable<Bike>? bikes;
    private string manufacturerFilter = "Honda";
    private ElementReference inputContainer;
    private string toastMessage = string.Empty;
    // protected override async Task OnInitializedAsync()
    // {
    //     await LoadBikes();
    // }

    private void ShowInfo()
    {
        ToastService.ShowToast(ToastIntent.Mention, "This is just a test..", 2000);
    }

    private void HandleInputChange(ChangeEventArgs e)
    {
        manufacturerFilter = e.Value?.ToString() ?? string.Empty;
    }
    private async Task HandleEnterKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await LoadBikes();
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Call JavaScript to find and focus the native input element inside the FluentTextField component
                // await JavaScript.InvokeVoidAsync("focusFluentTextField", inputContainer);
            }
            catch (Exception ex)
            {
                // Handle error
                Console.WriteLine($"Error invoking JS function: {ex.Message}");
            }
        }

    }
    private async Task<ElementReference?> GetInputElementAsync(ElementReference container)
    {
        // Query the container for the input element using JS Interop
        var inputElement = await JavaScript.InvokeAsync<ElementReference>("getInputElementFromContainer", container);
        return inputElement;
    }

    private async Task LoadBikes()
    {
        ToastService.ShowToast(ToastIntent.Info, "Fetching data from webservice.. ", 5000);

        try
        {
            justStarted = false;
            var bikelist = (await BikeService.GetBikesAsync(manufacturerFilter)).AsQueryable();
            //bikes = bikelist;

            bikes = bikelist.AsQueryable();

            // foreach (var bike in bikes)
            // {
            //     Debug.WriteLine($"Bike: {bike.Title} - {bike.Model} - {bike.TopSpeed}");
            //     //Logger.LogInformation($"Bike: {bike.Title} - {bike.Model} - {bike.TopSpeed}");
            // }

            // Logger.LogInformation("Motorcycle list loaded successfully.");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ToastService.ShowToast(ToastIntent.Error, "Error: " + ex.Message, 5000);

            // Logger.LogError(ex, "Error loading motorcycles.");
        }
    }
}
